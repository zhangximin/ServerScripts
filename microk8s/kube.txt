1. cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

2. sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg2

3. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

4. sudo add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"

5. # apt-get update && apt-get install -y \
  #containerd.io=1.2.13-2 \
  #docker-ce=5:19.03.11~3-0~ubuntu-$(lsb_release -cs) \
  #docker-ce-cli=5:19.03.11~3-0~ubuntu-$(lsb_release -cs)

	sudo apt update
	sudo apt install containerd.io docker-ce docker-ce-cli

6. cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "registry-mirrors": ["https://hccwwfjl.mirror.aliyuncs.com"],
  "storage-driver": "overlay2"
}
EOF

7. sudo mkdir -p /etc/systemd/system/docker.service.d

8.  sudo systemctl daemon-reload && sudo systemctl restart docker

9. sudo systemctl enable docker

10. Install kubelet kubeadm kubectl from aliyun

curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add - 
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main
EOF  
sudo apt-get update
sudo apt-get install kubelet kubeadm kubectl

11. sudo kubeadm init --image-repository registry.aliyuncs.com/google_containers --pod-network-cidr 10.244.0.0/16

==============20200925===============
sudo kubeadm join 192.168.1.210:6443 --token 3ijmbi.ouw8tr43fnz916v5 \
    --discovery-token-ca-cert-hash sha256:21cc020b7c37325945606b93cb6b62073882f9fe39b9ff089cd18eab38696718

get token:
	kubeadm token create
get discovery-token-ca-cert-hash:
	openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | \
   openssl dgst -sha256 -hex | sed 's/^.* //'

=====================================

Install Calico

    Install the Tigera Calico operator and custom resource definitions.

    kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml

    Install Calico by creating the necessary custom resource. For more information on configuration options available in this manifest, see the installation reference.

    kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml

        Note: Before creating this manifest, read its contents and make sure its settings are correct for your environment. For example, you may need to change the default IP pool CIDR to match your pod network CIDR.

    Confirm that all of the pods are running with the following command.

    watch kubectl get pods -n calico-system

    Wait until each pod has the STATUS of Running.

        Note: The Tigera operator installs resources in the calico-system namespace. Other install methods may use the kube-system namespace instead.

    Remove the taints on the master so that you can schedule pods on it.

    kubectl taint nodes --all node-role.kubernetes.io/master-

    It should return the following.

    node/<your-hostname> untainted

    Confirm that you now have a node in your cluster with the following command.

    kubectl get nodes -o wide

    It should return something like the following.

    NAME              STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION    CONTAINER-RUNTIME
    <your-hostname>   Ready    master   52m   v1.12.2   10.128.0.28   <none>        Ubuntu 18.04.1 LTS   4.15.0-1023-gcp   docker://18.6.1

Congratulations! You now have a single-host Kubernetes cluster with Calico.
=====================================================
